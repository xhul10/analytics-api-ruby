=begin
#Brightcove Analytics API Reference

#Reference for the Brightcove Analytics API, used to retrieve analytics data for your accounts. To test API requests, you can use our <a href=\"/getting-started/concepts-testing-tools-brightcove-apis.html\" target=\"_blank\">API Testing Tools</a>.  For additional in-depth guides to features of the API, see the **[general documentation](/analytics/index.html)**.   **Base URL**: https://analytics.api.brightcove.com

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class Items
    # number of times a player entered ad mode
    attr_accessor :ad_mode_begin

    # number of times a player completed ad mode
    attr_accessor :ad_mode_complete

    # the total bytes of data delivered, including the videos, other assets such as images and captions, and (for player reports) the player code - some of the date is obtained from CDNs and may not be available for up to 3 days
    attr_accessor :bytes_delivered

    # the calculated engagement score for the video
    attr_accessor :engagement_score

    # video views divided by video impressions
    attr_accessor :play_rate

    # number of play requests received for a video
    attr_accessor :play_request

    # the video id
    attr_accessor :video

    # 'the duration of the video in seconds (note that the duration is available only if there is at least one `video_view`)'
    attr_accessor :duration

    # number of views at the 1% point of the video duration
    attr_accessor :video_engagement_1

    # number of views at the 25% point of the video duration
    attr_accessor :video_engagement_25

    # number of views at the 50% point of the video duration
    attr_accessor :video_engagement_50

    # number of views at the 75% point of the video duration
    attr_accessor :video_engagement_75

    # number of views at the 100% point of the video duration
    attr_accessor :video_engagement_100

    # number of times the video was loaded in a player
    attr_accessor :video_impression

    # name of the video
    attr_accessor :name

    # average percentage of the video played when viewed
    attr_accessor :video_percent_viewed

    # total seconds of the video viewed
    attr_accessor :video_seconds_viewed

    # number of times some portion of the video was viewed
    attr_accessor :video_view

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ad_mode_begin' => :'ad_mode_begin',
        :'ad_mode_complete' => :'ad_mode_complete',
        :'bytes_delivered' => :'bytes_delivered',
        :'engagement_score' => :'engagement_score',
        :'play_rate' => :'play_rate',
        :'play_request' => :'play_request',
        :'video' => :'video',
        :'duration' => :'duration',
        :'video_engagement_1' => :'video_engagement_1',
        :'video_engagement_25' => :'video_engagement_25',
        :'video_engagement_50' => :'video_engagement_50',
        :'video_engagement_75' => :'video_engagement_75',
        :'video_engagement_100' => :'video_engagement_100',
        :'video_impression' => :'video_impression',
        :'name' => :'name',
        :'video_percent_viewed' => :'video_percent_viewed',
        :'video_seconds_viewed' => :'video_seconds_viewed',
        :'video_view' => :'video_view'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ad_mode_begin' => :'Integer',
        :'ad_mode_complete' => :'Integer',
        :'bytes_delivered' => :'Float',
        :'engagement_score' => :'Float',
        :'play_rate' => :'Float',
        :'play_request' => :'Integer',
        :'video' => :'String',
        :'duration' => :'String',
        :'video_engagement_1' => :'Float',
        :'video_engagement_25' => :'Float',
        :'video_engagement_50' => :'Float',
        :'video_engagement_75' => :'Float',
        :'video_engagement_100' => :'Float',
        :'video_impression' => :'Integer',
        :'name' => :'String',
        :'video_percent_viewed' => :'Float',
        :'video_seconds_viewed' => :'Float',
        :'video_view' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Items` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Items`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ad_mode_begin')
        self.ad_mode_begin = attributes[:'ad_mode_begin']
      end

      if attributes.key?(:'ad_mode_complete')
        self.ad_mode_complete = attributes[:'ad_mode_complete']
      end

      if attributes.key?(:'bytes_delivered')
        self.bytes_delivered = attributes[:'bytes_delivered']
      end

      if attributes.key?(:'engagement_score')
        self.engagement_score = attributes[:'engagement_score']
      end

      if attributes.key?(:'play_rate')
        self.play_rate = attributes[:'play_rate']
      end

      if attributes.key?(:'play_request')
        self.play_request = attributes[:'play_request']
      end

      if attributes.key?(:'video')
        self.video = attributes[:'video']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'video_engagement_1')
        self.video_engagement_1 = attributes[:'video_engagement_1']
      end

      if attributes.key?(:'video_engagement_25')
        self.video_engagement_25 = attributes[:'video_engagement_25']
      end

      if attributes.key?(:'video_engagement_50')
        self.video_engagement_50 = attributes[:'video_engagement_50']
      end

      if attributes.key?(:'video_engagement_75')
        self.video_engagement_75 = attributes[:'video_engagement_75']
      end

      if attributes.key?(:'video_engagement_100')
        self.video_engagement_100 = attributes[:'video_engagement_100']
      end

      if attributes.key?(:'video_impression')
        self.video_impression = attributes[:'video_impression']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'video_percent_viewed')
        self.video_percent_viewed = attributes[:'video_percent_viewed']
      end

      if attributes.key?(:'video_seconds_viewed')
        self.video_seconds_viewed = attributes[:'video_seconds_viewed']
      end

      if attributes.key?(:'video_view')
        self.video_view = attributes[:'video_view']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ad_mode_begin == o.ad_mode_begin &&
          ad_mode_complete == o.ad_mode_complete &&
          bytes_delivered == o.bytes_delivered &&
          engagement_score == o.engagement_score &&
          play_rate == o.play_rate &&
          play_request == o.play_request &&
          video == o.video &&
          duration == o.duration &&
          video_engagement_1 == o.video_engagement_1 &&
          video_engagement_25 == o.video_engagement_25 &&
          video_engagement_50 == o.video_engagement_50 &&
          video_engagement_75 == o.video_engagement_75 &&
          video_engagement_100 == o.video_engagement_100 &&
          video_impression == o.video_impression &&
          name == o.name &&
          video_percent_viewed == o.video_percent_viewed &&
          video_seconds_viewed == o.video_seconds_viewed &&
          video_view == o.video_view
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ad_mode_begin, ad_mode_complete, bytes_delivered, engagement_score, play_rate, play_request, video, duration, video_engagement_1, video_engagement_25, video_engagement_50, video_engagement_75, video_engagement_100, video_impression, name, video_percent_viewed, video_seconds_viewed, video_view].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
