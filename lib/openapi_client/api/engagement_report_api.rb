=begin
#Brightcove Analytics API Reference

#Reference for the Brightcove Analytics API, used to retrieve analytics data for your accounts. To test API requests, you can use our <a href=\"/getting-started/concepts-testing-tools-brightcove-apis.html\" target=\"_blank\">API Testing Tools</a>.  For additional in-depth guides to features of the API, see the **[general documentation](/analytics/index.html)**.   **Base URL**: https://analytics.api.brightcove.com

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class EngagementReportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Account Engagement
    # Get a summary report of engagement for the account. Note:  Engagement reports are only available for periods within the past 32 days. Requests outside that range will return an error The only parameters supported for Engagement reports are from and to Engagement reports are available for single accounts only - reports on multiple accounts will not work
    # @param account_id [String] a Video Cloud account ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param [Hash] opts the optional parameters
    # @return [Timeline]
    def get_account_engagement(account_id, content_type, authorization, accept_encoding, opts = {})
      data, _status_code, _headers = get_account_engagement_with_http_info(account_id, content_type, authorization, accept_encoding, opts)
      data
    end

    # Get Account Engagement
    # Get a summary report of engagement for the account. Note:  Engagement reports are only available for periods within the past 32 days. Requests outside that range will return an error The only parameters supported for Engagement reports are from and to Engagement reports are available for single accounts only - reports on multiple accounts will not work
    # @param account_id [String] a Video Cloud account ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Timeline, Integer, Hash)>] Timeline data, response status code and response headers
    def get_account_engagement_with_http_info(account_id, content_type, authorization, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementReportApi.get_account_engagement ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling EngagementReportApi.get_account_engagement"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EngagementReportApi.get_account_engagement"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EngagementReportApi.get_account_engagement"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling EngagementReportApi.get_account_engagement"
      end
      # resource path
      local_var_path = '/v1/engagement/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Timeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"EngagementReportApi.get_account_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementReportApi#get_account_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Player Engagement
    # Get a summary report of engagement for a player. Note:  Engagement reports are only available for periods within the past 32 days. Requests outside that range will return an error The only parameters supported for Engagement reports are from and to Engagement reports are available for single accounts only - reports on multiple accounts will not work
    # @param account_id [String] a Video Cloud account ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param player_id [String] a Video Cloud player ID
    # @param [Hash] opts the optional parameters
    # @return [Timeline]
    def get_player_engagement(account_id, content_type, authorization, accept_encoding, player_id, opts = {})
      data, _status_code, _headers = get_player_engagement_with_http_info(account_id, content_type, authorization, accept_encoding, player_id, opts)
      data
    end

    # Get Player Engagement
    # Get a summary report of engagement for a player. Note:  Engagement reports are only available for periods within the past 32 days. Requests outside that range will return an error The only parameters supported for Engagement reports are from and to Engagement reports are available for single accounts only - reports on multiple accounts will not work
    # @param account_id [String] a Video Cloud account ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param player_id [String] a Video Cloud player ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Timeline, Integer, Hash)>] Timeline data, response status code and response headers
    def get_player_engagement_with_http_info(account_id, content_type, authorization, accept_encoding, player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementReportApi.get_player_engagement ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling EngagementReportApi.get_player_engagement"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EngagementReportApi.get_player_engagement"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EngagementReportApi.get_player_engagement"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling EngagementReportApi.get_player_engagement"
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling EngagementReportApi.get_player_engagement"
      end
      # resource path
      local_var_path = '/v1/engagement/accounts/{account_id}/players/{player_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'player_id' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Timeline'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"EngagementReportApi.get_player_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementReportApi#get_player_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Video Engagement
    # Get a summary report of engagement for a video. Note:  Engagement reports are only available for periods within the past 32 days. Requests outside that range will return an error The only parameters supported for Engagement reports are from and to Engagement reports are available for single accounts only - reports on multiple accounts will not work
    # @param account_id [String] a Video Cloud account ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param video_id [String] a Video Cloud video ID
    # @param [Hash] opts the optional parameters
    # @return [GetVideoEngagementResponse]
    def get_video_engagement(account_id, content_type, authorization, accept_encoding, video_id, opts = {})
      data, _status_code, _headers = get_video_engagement_with_http_info(account_id, content_type, authorization, accept_encoding, video_id, opts)
      data
    end

    # Get Video Engagement
    # Get a summary report of engagement for a video. Note:  Engagement reports are only available for periods within the past 32 days. Requests outside that range will return an error The only parameters supported for Engagement reports are from and to Engagement reports are available for single accounts only - reports on multiple accounts will not work
    # @param account_id [String] a Video Cloud account ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param video_id [String] a Video Cloud video ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVideoEngagementResponse, Integer, Hash)>] GetVideoEngagementResponse data, response status code and response headers
    def get_video_engagement_with_http_info(account_id, content_type, authorization, accept_encoding, video_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EngagementReportApi.get_video_engagement ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling EngagementReportApi.get_video_engagement"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling EngagementReportApi.get_video_engagement"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EngagementReportApi.get_video_engagement"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling EngagementReportApi.get_video_engagement"
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling EngagementReportApi.get_video_engagement"
      end
      # resource path
      local_var_path = '/v1/engagement/accounts/{account_id}/videos/{video_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'video_id' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVideoEngagementResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"EngagementReportApi.get_video_engagement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EngagementReportApi#get_video_engagement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
