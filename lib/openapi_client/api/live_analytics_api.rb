=begin
#Brightcove Analytics API Reference

#Reference for the Brightcove Analytics API, used to retrieve analytics data for your accounts. To test API requests, you can use our <a href=\"/getting-started/concepts-testing-tools-brightcove-apis.html\" target=\"_blank\">API Testing Tools</a>.  For additional in-depth guides to features of the API, see the **[general documentation](/analytics/index.html)**.   **Base URL**: https://analytics.api.brightcove.com

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class LiveAnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Live Analytics event
    # Provides a summary of analytics data collected for a live stream.
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param account_id [String] a Video Cloud account ID
    # @param dimensions_for_live_analytics [LiveDimensions] One or more dimensions to report on for Live Analytics requests Dimensions:   - video   - video, country   - video, device_type
    # @param metrics [String] Data metrics to return for live analytics requests:    - &#x60;video_impression&#x60; - the number of video impressions   - &#x60;video_view&#x60; - the number of video views   - &#x60;video_seconds_viewed&#x60; - seconds of video viewed   - &#x60;alive_ss_ad_start&#x60; - SSAI ad starts   - &#x60;fingerprint_count&#x60; - \&quot;fingerprint\&quot; (user) count   - &#x60;ccu&#x60; - concurrent viewers
    # @param filters_for_live_analytics [LiveWhere] One or more filters to limit responses for Live Analytics requests Available filters:   - video   - country   - device_type
    # @param [Hash] opts the optional parameters
    # @return [GetEventsResponse]
    def get_live_events(content_type, authorization, accept_encoding, account_id, dimensions_for_live_analytics, metrics, filters_for_live_analytics, opts = {})
      data, _status_code, _headers = get_live_events_with_http_info(content_type, authorization, accept_encoding, account_id, dimensions_for_live_analytics, metrics, filters_for_live_analytics, opts)
      data
    end

    # Get Live Analytics event
    # Provides a summary of analytics data collected for a live stream.
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param account_id [String] a Video Cloud account ID
    # @param dimensions_for_live_analytics [LiveDimensions] One or more dimensions to report on for Live Analytics requests Dimensions:   - video   - video, country   - video, device_type
    # @param metrics [String] Data metrics to return for live analytics requests:    - &#x60;video_impression&#x60; - the number of video impressions   - &#x60;video_view&#x60; - the number of video views   - &#x60;video_seconds_viewed&#x60; - seconds of video viewed   - &#x60;alive_ss_ad_start&#x60; - SSAI ad starts   - &#x60;fingerprint_count&#x60; - \&quot;fingerprint\&quot; (user) count   - &#x60;ccu&#x60; - concurrent viewers
    # @param filters_for_live_analytics [LiveWhere] One or more filters to limit responses for Live Analytics requests Available filters:   - video   - country   - device_type
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEventsResponse, Integer, Hash)>] GetEventsResponse data, response status code and response headers
    def get_live_events_with_http_info(content_type, authorization, accept_encoding, account_id, dimensions_for_live_analytics, metrics, filters_for_live_analytics, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveAnalyticsApi.get_live_events ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveAnalyticsApi.get_live_events"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling LiveAnalyticsApi.get_live_events"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling LiveAnalyticsApi.get_live_events"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling LiveAnalyticsApi.get_live_events"
      end
      # verify the required parameter 'dimensions_for_live_analytics' is set
      if @api_client.config.client_side_validation && dimensions_for_live_analytics.nil?
        fail ArgumentError, "Missing the required parameter 'dimensions_for_live_analytics' when calling LiveAnalyticsApi.get_live_events"
      end
      # verify the required parameter 'metrics' is set
      if @api_client.config.client_side_validation && metrics.nil?
        fail ArgumentError, "Missing the required parameter 'metrics' when calling LiveAnalyticsApi.get_live_events"
      end
      # verify enum value
      allowable_values = ["video_impression", "video_view", "video_seconds_viewed", "alive_ss_ad_start", "fingerprint_count", "ccu"]
      if @api_client.config.client_side_validation && !allowable_values.include?(metrics)
        fail ArgumentError, "invalid value for \"metrics\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'filters_for_live_analytics' is set
      if @api_client.config.client_side_validation && filters_for_live_analytics.nil?
        fail ArgumentError, "Missing the required parameter 'filters_for_live_analytics' when calling LiveAnalyticsApi.get_live_events"
      end
      # resource path
      local_var_path = '/v1/events/accounts/{account-id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dimensions for live analytics'] = dimensions_for_live_analytics
      query_params[:'metrics'] = metrics
      query_params[:'filters for live analytics'] = filters_for_live_analytics

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"LiveAnalyticsApi.get_live_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveAnalyticsApi#get_live_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Live Analytics time-series
    # A time-series is defined as a an list of timestamp-value pairs representing samples of a variable (metric). The time-series API intends to allow the user to return a time-series for the set of metrics requested in the query.
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param account_id [String] a Video Cloud account ID
    # @param dimensions_for_live_analytics [LiveDimensions] One or more dimensions to report on for Live Analytics requests Dimensions:   - video   - video, country   - video, device_type
    # @param metrics [String] Data metrics to return for live analytics requests:    - &#x60;video_impression&#x60; - the number of video impressions   - &#x60;video_view&#x60; - the number of video views   - &#x60;video_seconds_viewed&#x60; - seconds of video viewed   - &#x60;alive_ss_ad_start&#x60; - SSAI ad starts   - &#x60;fingerprint_count&#x60; - \&quot;fingerprint\&quot; (user) count   - &#x60;ccu&#x60; - concurrent viewers
    # @param where [LiveWhere] one or more &#39;dimension&#x3D;&#x3D;value&#39; pairs to filter the results; for live, the only available filters are &#x60;country&#x60;, &#x60;device-type&#x60;, and &#x60;video&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :bucket_limit &#39;Max number of points to be returned for a time-series&#39;
    # @option opts [String] :bucket_duration &#39;Intervals duration in the form of an integer plus &#x60;m&#x60; (minutes), &#x60;h&#x60; (hours), or &#x60;d&#x60; (days)&#39;
    # @option opts [OneOfstringinteger] :from &#39;Start time for the period covered by the report — epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)&#39;
    # @option opts [OneOfstringinteger] :to End time for the period covered by the report — &#x60;now&#x60; or epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)
    # @return [GetTimeSeriesResponse]
    def get_live_time_series(content_type, authorization, accept_encoding, account_id, dimensions_for_live_analytics, metrics, where, opts = {})
      data, _status_code, _headers = get_live_time_series_with_http_info(content_type, authorization, accept_encoding, account_id, dimensions_for_live_analytics, metrics, where, opts)
      data
    end

    # Get Live Analytics time-series
    # A time-series is defined as a an list of timestamp-value pairs representing samples of a variable (metric). The time-series API intends to allow the user to return a time-series for the set of metrics requested in the query.
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param account_id [String] a Video Cloud account ID
    # @param dimensions_for_live_analytics [LiveDimensions] One or more dimensions to report on for Live Analytics requests Dimensions:   - video   - video, country   - video, device_type
    # @param metrics [String] Data metrics to return for live analytics requests:    - &#x60;video_impression&#x60; - the number of video impressions   - &#x60;video_view&#x60; - the number of video views   - &#x60;video_seconds_viewed&#x60; - seconds of video viewed   - &#x60;alive_ss_ad_start&#x60; - SSAI ad starts   - &#x60;fingerprint_count&#x60; - \&quot;fingerprint\&quot; (user) count   - &#x60;ccu&#x60; - concurrent viewers
    # @param where [LiveWhere] one or more &#39;dimension&#x3D;&#x3D;value&#39; pairs to filter the results; for live, the only available filters are &#x60;country&#x60;, &#x60;device-type&#x60;, and &#x60;video&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :bucket_limit &#39;Max number of points to be returned for a time-series&#39;
    # @option opts [String] :bucket_duration &#39;Intervals duration in the form of an integer plus &#x60;m&#x60; (minutes), &#x60;h&#x60; (hours), or &#x60;d&#x60; (days)&#39;
    # @option opts [OneOfstringinteger] :from &#39;Start time for the period covered by the report — epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)&#39;
    # @option opts [OneOfstringinteger] :to End time for the period covered by the report — &#x60;now&#x60; or epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)
    # @return [Array<(GetTimeSeriesResponse, Integer, Hash)>] GetTimeSeriesResponse data, response status code and response headers
    def get_live_time_series_with_http_info(content_type, authorization, accept_encoding, account_id, dimensions_for_live_analytics, metrics, where, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveAnalyticsApi.get_live_time_series ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveAnalyticsApi.get_live_time_series"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling LiveAnalyticsApi.get_live_time_series"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling LiveAnalyticsApi.get_live_time_series"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling LiveAnalyticsApi.get_live_time_series"
      end
      # verify the required parameter 'dimensions_for_live_analytics' is set
      if @api_client.config.client_side_validation && dimensions_for_live_analytics.nil?
        fail ArgumentError, "Missing the required parameter 'dimensions_for_live_analytics' when calling LiveAnalyticsApi.get_live_time_series"
      end
      # verify the required parameter 'metrics' is set
      if @api_client.config.client_side_validation && metrics.nil?
        fail ArgumentError, "Missing the required parameter 'metrics' when calling LiveAnalyticsApi.get_live_time_series"
      end
      # verify enum value
      allowable_values = ["video_impression", "video_view", "video_seconds_viewed", "alive_ss_ad_start", "fingerprint_count", "ccu"]
      if @api_client.config.client_side_validation && !allowable_values.include?(metrics)
        fail ArgumentError, "invalid value for \"metrics\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'where' is set
      if @api_client.config.client_side_validation && where.nil?
        fail ArgumentError, "Missing the required parameter 'where' when calling LiveAnalyticsApi.get_live_time_series"
      end
      # resource path
      local_var_path = '/v1/timeseries/accounts/{account_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dimensions for live analytics'] = dimensions_for_live_analytics
      query_params[:'metrics'] = metrics
      query_params[:'where'] = where
      query_params[:'bucket_limit'] = opts[:'bucket_limit'] if !opts[:'bucket_limit'].nil?
      query_params[:'bucket_duration'] = opts[:'bucket_duration'] if !opts[:'bucket_duration'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTimeSeriesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"LiveAnalyticsApi.get_live_time_series",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveAnalyticsApi#get_live_time_series\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
