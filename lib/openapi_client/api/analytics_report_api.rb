=begin
#Brightcove Analytics API Reference

#Reference for the Brightcove Analytics API, used to retrieve analytics data for your accounts. To test API requests, you can use our <a href=\"/getting-started/concepts-testing-tools-brightcove-apis.html\" target=\"_blank\">API Testing Tools</a>.  For additional in-depth guides to features of the API, see the **[general documentation](/analytics/index.html)**.   **Base URL**: https://analytics.api.brightcove.com

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class AnalyticsReportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Analytics Report
    # Get an analytics report on one or more dimensions. Note that the fields returned in the response will vary according to the dimension(s) requested and the fields specified in the fields parameter. See [the API Overview](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) and the dimension guides for details.
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param accounts [String] One or more account ids, separated by commas
    # @param dimensions [Dimensions] One or more dimensions to report on; see [Multiple Dimensions](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) or which combined dimensions are supported  Dimensions:   - account   - browser_type   - city   - country   - date   - date_hour   - destination_domain   - destination_path   - device_os   - device_manufacturer   - device_type   - live_stream   - player   - referrer_domain   - region   - search_terms   - social_platform   - source_type   - video
    # @param where [LiveWhere] one or more &#39;dimension&#x3D;&#x3D;value&#39; pairs to filter the results; for live, the only available filters are &#x60;country&#x60;, &#x60;device-type&#x60;, and &#x60;video&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to return (default to 10)
    # @option opts [Integer] :offset Number of items to skip (default to 0)
    # @option opts [String] :sort Field to sort results by (prefix with &#x60;-&#x60; for descending order) (default to 'video_view')
    # @option opts [String] :fields Fields to return - available fields varies according to the dimensions - see the [Overview: Analytics API](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) for more details (default to '`video_view` + others (varies by dimension)')
    # @option opts [OneOfstringinteger] :from &#39;Start time for the period covered by the report — epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)&#39;
    # @option opts [OneOfstringinteger] :to End time for the period covered by the report — &#x60;now&#x60; or epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)
    # @option opts [Format] :format format to return the results in
    # @option opts [Boolean] :reconciled if true, only reconciled data is returned; if false, only realtime data is returned; if not present, both reconciled and realtime data are returned (default to true)
    # @return [GetAnalyticsReportResponse]
    def get_analytics_report(content_type, authorization, accept_encoding, accounts, dimensions, where, opts = {})
      data, _status_code, _headers = get_analytics_report_with_http_info(content_type, authorization, accept_encoding, accounts, dimensions, where, opts)
      data
    end

    # Get Analytics Report
    # Get an analytics report on one or more dimensions. Note that the fields returned in the response will vary according to the dimension(s) requested and the fields specified in the fields parameter. See [the API Overview](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) and the dimension guides for details.
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param accounts [String] One or more account ids, separated by commas
    # @param dimensions [Dimensions] One or more dimensions to report on; see [Multiple Dimensions](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) or which combined dimensions are supported  Dimensions:   - account   - browser_type   - city   - country   - date   - date_hour   - destination_domain   - destination_path   - device_os   - device_manufacturer   - device_type   - live_stream   - player   - referrer_domain   - region   - search_terms   - social_platform   - source_type   - video
    # @param where [LiveWhere] one or more &#39;dimension&#x3D;&#x3D;value&#39; pairs to filter the results; for live, the only available filters are &#x60;country&#x60;, &#x60;device-type&#x60;, and &#x60;video&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to return
    # @option opts [Integer] :offset Number of items to skip
    # @option opts [String] :sort Field to sort results by (prefix with &#x60;-&#x60; for descending order)
    # @option opts [String] :fields Fields to return - available fields varies according to the dimensions - see the [Overview: Analytics API](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) for more details
    # @option opts [OneOfstringinteger] :from &#39;Start time for the period covered by the report — epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)&#39;
    # @option opts [OneOfstringinteger] :to End time for the period covered by the report — &#x60;now&#x60; or epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)
    # @option opts [Format] :format format to return the results in
    # @option opts [Boolean] :reconciled if true, only reconciled data is returned; if false, only realtime data is returned; if not present, both reconciled and realtime data are returned
    # @return [Array<(GetAnalyticsReportResponse, Integer, Hash)>] GetAnalyticsReportResponse data, response status code and response headers
    def get_analytics_report_with_http_info(content_type, authorization, accept_encoding, accounts, dimensions, where, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsReportApi.get_analytics_report ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsReportApi.get_analytics_report"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AnalyticsReportApi.get_analytics_report"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling AnalyticsReportApi.get_analytics_report"
      end
      # verify the required parameter 'accounts' is set
      if @api_client.config.client_side_validation && accounts.nil?
        fail ArgumentError, "Missing the required parameter 'accounts' when calling AnalyticsReportApi.get_analytics_report"
      end
      # verify the required parameter 'dimensions' is set
      if @api_client.config.client_side_validation && dimensions.nil?
        fail ArgumentError, "Missing the required parameter 'dimensions' when calling AnalyticsReportApi.get_analytics_report"
      end
      # verify the required parameter 'where' is set
      if @api_client.config.client_side_validation && where.nil?
        fail ArgumentError, "Missing the required parameter 'where' when calling AnalyticsReportApi.get_analytics_report"
      end
      # resource path
      local_var_path = '/v1/data'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accounts'] = accounts
      query_params[:'dimensions'] = dimensions
      query_params[:'where'] = where
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'reconciled'] = opts[:'reconciled'] if !opts[:'reconciled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyticsReportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"AnalyticsReportApi.get_analytics_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsReportApi#get_analytics_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Available Date Range
    # Get the date range for which reconciled data is available for any Analytics API report. All parameters are allowed, but only account, dimensions, and where affect the result - all others are ignored. Note that date range for this request must fall within the available date range for the dimensions requested.
    # @param accounts [String] One or more account ids, separated by commas
    # @param dimensions [Dimensions] One or more dimensions to report on; see [Multiple Dimensions](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) or which combined dimensions are supported  Dimensions:   - account   - browser_type   - city   - country   - date   - date_hour   - destination_domain   - destination_path   - device_os   - device_manufacturer   - device_type   - live_stream   - player   - referrer_domain   - region   - search_terms   - social_platform   - source_type   - video
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param where [LiveWhere] one or more &#39;dimension&#x3D;&#x3D;value&#39; pairs to filter the results; for live, the only available filters are &#x60;country&#x60;, &#x60;device-type&#x60;, and &#x60;video&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to return (default to 10)
    # @option opts [Integer] :offset Number of items to skip (default to 0)
    # @option opts [String] :sort Field to sort results by (prefix with &#x60;-&#x60; for descending order) (default to 'video_view')
    # @option opts [String] :fields Fields to return - available fields varies according to the dimensions - see the [Overview: Analytics API](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) for more details (default to '`video_view` + others (varies by dimension)')
    # @option opts [OneOfstringinteger] :from &#39;Start time for the period covered by the report — epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)&#39;
    # @option opts [OneOfstringinteger] :to End time for the period covered by the report — &#x60;now&#x60; or epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)
    # @option opts [Format] :format format to return the results in
    # @option opts [Boolean] :reconciled if true, only reconciled data is returned; if false, only realtime data is returned; if not present, both reconciled and realtime data are returned (default to true)
    # @return [GetAvailableDateRangeResponse]
    def get_available_date_range(accounts, dimensions, content_type, authorization, accept_encoding, where, opts = {})
      data, _status_code, _headers = get_available_date_range_with_http_info(accounts, dimensions, content_type, authorization, accept_encoding, where, opts)
      data
    end

    # Get Available Date Range
    # Get the date range for which reconciled data is available for any Analytics API report. All parameters are allowed, but only account, dimensions, and where affect the result - all others are ignored. Note that date range for this request must fall within the available date range for the dimensions requested.
    # @param accounts [String] One or more account ids, separated by commas
    # @param dimensions [Dimensions] One or more dimensions to report on; see [Multiple Dimensions](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) or which combined dimensions are supported  Dimensions:   - account   - browser_type   - city   - country   - date   - date_hour   - destination_domain   - destination_path   - device_os   - device_manufacturer   - device_type   - live_stream   - player   - referrer_domain   - region   - search_terms   - social_platform   - source_type   - video
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param where [LiveWhere] one or more &#39;dimension&#x3D;&#x3D;value&#39; pairs to filter the results; for live, the only available filters are &#x60;country&#x60;, &#x60;device-type&#x60;, and &#x60;video&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to return
    # @option opts [Integer] :offset Number of items to skip
    # @option opts [String] :sort Field to sort results by (prefix with &#x60;-&#x60; for descending order)
    # @option opts [String] :fields Fields to return - available fields varies according to the dimensions - see the [Overview: Analytics API](/analytics/getting-started/analytics-api-overview-dimensions-fields-and-parameters.html) for more details
    # @option opts [OneOfstringinteger] :from &#39;Start time for the period covered by the report — epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)&#39;
    # @option opts [OneOfstringinteger] :to End time for the period covered by the report — &#x60;now&#x60; or epoch time in milliseconds (&#x60;1535654206775&#x60;) or a date in the format &#x60;yyyy-mm-dd&#x60; (such as &#x60;2013-09-26&#x60;)
    # @option opts [Format] :format format to return the results in
    # @option opts [Boolean] :reconciled if true, only reconciled data is returned; if false, only realtime data is returned; if not present, both reconciled and realtime data are returned
    # @return [Array<(GetAvailableDateRangeResponse, Integer, Hash)>] GetAvailableDateRangeResponse data, response status code and response headers
    def get_available_date_range_with_http_info(accounts, dimensions, content_type, authorization, accept_encoding, where, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsReportApi.get_available_date_range ...'
      end
      # verify the required parameter 'accounts' is set
      if @api_client.config.client_side_validation && accounts.nil?
        fail ArgumentError, "Missing the required parameter 'accounts' when calling AnalyticsReportApi.get_available_date_range"
      end
      # verify the required parameter 'dimensions' is set
      if @api_client.config.client_side_validation && dimensions.nil?
        fail ArgumentError, "Missing the required parameter 'dimensions' when calling AnalyticsReportApi.get_available_date_range"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AnalyticsReportApi.get_available_date_range"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AnalyticsReportApi.get_available_date_range"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling AnalyticsReportApi.get_available_date_range"
      end
      # verify the required parameter 'where' is set
      if @api_client.config.client_side_validation && where.nil?
        fail ArgumentError, "Missing the required parameter 'where' when calling AnalyticsReportApi.get_available_date_range"
      end
      # resource path
      local_var_path = '/v1/data/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accounts'] = accounts
      query_params[:'dimensions'] = dimensions
      query_params[:'where'] = where
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'reconciled'] = opts[:'reconciled'] if !opts[:'reconciled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAvailableDateRangeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"AnalyticsReportApi.get_available_date_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsReportApi#get_available_date_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
