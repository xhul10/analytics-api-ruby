=begin
#Brightcove Analytics API Reference

#Reference for the Brightcove Analytics API, used to retrieve analytics data for your accounts. To test API requests, you can use our <a href=\"/getting-started/concepts-testing-tools-brightcove-apis.html\" target=\"_blank\">API Testing Tools</a>.  For additional in-depth guides to features of the API, see the **[general documentation](/analytics/index.html)**.   **Base URL**: https://analytics.api.brightcove.com

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class VideoDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Alltime Video Views
    # 'Returns the total alltime video views for a video. This is a low-latency endpoint appropriate for use by client-side apps such as the Brightcove Player.'
    # @param account_id [String] a Video Cloud account ID
    # @param video_id [String] a Video Cloud video ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param [Hash] opts the optional parameters
    # @return [GetAlltimeVideoViewsResponse]
    def get_alltime_video_views(account_id, video_id, content_type, authorization, accept_encoding, opts = {})
      data, _status_code, _headers = get_alltime_video_views_with_http_info(account_id, video_id, content_type, authorization, accept_encoding, opts)
      data
    end

    # Get Alltime Video Views
    # &#39;Returns the total alltime video views for a video. This is a low-latency endpoint appropriate for use by client-side apps such as the Brightcove Player.&#39;
    # @param account_id [String] a Video Cloud account ID
    # @param video_id [String] a Video Cloud video ID
    # @param content_type [String] Content-Type: application/json
    # @param authorization [String] Authorization: Bearer access_token (see Getting Access Tokens)
    # @param accept_encoding [String] Accept-Encoding: gzip (optional)
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAlltimeVideoViewsResponse, Integer, Hash)>] GetAlltimeVideoViewsResponse data, response status code and response headers
    def get_alltime_video_views_with_http_info(account_id, video_id, content_type, authorization, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoDataApi.get_alltime_video_views ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling VideoDataApi.get_alltime_video_views"
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideoDataApi.get_alltime_video_views"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling VideoDataApi.get_alltime_video_views"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling VideoDataApi.get_alltime_video_views"
      end
      # verify the required parameter 'accept_encoding' is set
      if @api_client.config.client_side_validation && accept_encoding.nil?
        fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling VideoDataApi.get_alltime_video_views"
      end
      # resource path
      local_var_path = '/v1/alltime/accounts/{account_id}/videos/{video_id}'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'video_id' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization
      header_params[:'Accept-Encoding'] = accept_encoding

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAlltimeVideoViewsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BC_OAuth2']

      new_options = opts.merge(
        :operation => :"VideoDataApi.get_alltime_video_views",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoDataApi#get_alltime_video_views\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
